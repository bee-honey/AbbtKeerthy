name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # build:
  #   name: Build and Test default scheme using any available iPhone simulator
  #   runs-on: macos-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Set Default Scheme
  #       run: |
  #         pwd && ls -la
  #         scheme_list=$(xcodebuild -list -json | tr -d "\n")
  #         default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
  #         echo $default | cat >default
  #         echo Using default scheme: $default
  #     - name: Build
  #       env:
  #         scheme: ${{ 'default' }}
  #         platform: ${{ 'iOS Simulator' }}
  #       run: |
  #         # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
  #         device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
  #         if [ $scheme = default ]; then scheme=$(cat default); fi
  #         if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
  #         file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
  #         xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"

  build_with_signing:
    name: Build and Archinve default scheme using any available iPhone simulator
    runs-on: macos-latest
    steps:
      # this was more debug as was curious what came pre-installed
      # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: checkout repository
        uses: actions/checkout@v3

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.DIST_BUILD_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.DIST_BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |

          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate and provisioning profile from secrets
          echo -n "$DIST_BUILD_CERT_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$DIST_BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # Verify if the certificate file exists
          if [ ! -f "$CERTIFICATE_PATH" ]; then
            echo "Certificate not found or invalid"
            exit 1
          fi

          # Check if the certificate file exists
          if [ ! -f "$CERTIFICATE_PATH" ]; then
            echo "Certificate file not found: $CERTIFICATE_PATH"
            exit 1
          fi

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          if [ $? -ne 0 ]; then
            echo "Failed to create keychain"
            exit 1
          fi

          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          if [ $? -ne 0 ]; then
            echo "Failed to set keychain settings"
            exit 1
          fi

          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          if [ $? -ne 0 ]; then
            echo "Failed to unlock keychain"
            exit 1
          fi

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          if [ $? -ne 0 ]; then
            echo "Failed to import certificate"
            exit 1
          fi

          # Set partition list to ensure trust (optional step)
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          if [ $? -ne 0 ]; then
            echo "Failed to set key partition list"
            exit 1
          fi

          # # Add keychain to the list
          # security list-keychain -d user -s $KEYCHAIN_PATH

          # # Apply provisioning profile
          # mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          # if [ -f "$PP_PATH" ]; then
          #   cp "$PP_PATH" ~/Library/MobileDevice/Provisioning\ Profiles/
          # else
          #   echo "Provisioning profile not found: $PP_PATH"
          #   exit 1
          # fi